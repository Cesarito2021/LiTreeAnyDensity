% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/architecture.R
\name{DetectAndMeasureTreesArch}
\alias{DetectAndMeasureTreesArch}
\title{Tree Detection and Diameter Measurement from Point Cloud Data}
\usage{
DetectAndMeasureTreesArch(
  data_ref,
  eps_value,
  minPts_value,
  d1_m_minimum,
  d1_m_maximum,
  n_ransac_par,
  k_ransac_par,
  t_ransac_par,
  d_ransac_par
)
}
\arguments{
\item{data_ref}{A data frame containing 3D coordinates (x, y, z) of point cloud data.}

\item{eps_value}{The epsilon parameter for the DBSCAN clustering algorithm, defining the neighborhood radius.}

\item{minPts_value}{The minimum number of points required to form a dense region in DBSCAN.}

\item{d1_m_minimum}{Minimum accepted DBH (in meters) for filtering detected stems.}

\item{d1_m_maximum}{Maximum accepted DBH (in meters) for filtering detected stems.}

\item{n_ransac_par}{The minimum number of points in a cluster required to apply RANSAC.}

\item{k_ransac_par}{The number of RANSAC iterations.}

\item{t_ransac_par}{The threshold distance to determine inliers during RANSAC fitting.}

\item{d_ransac_par}{The distance threshold for merging or validating detected shapes.}
}
\value{
An `sf` object (EPSG:3035) containing polygons of detected stem cross-sections with columns: `id` (cluster ID), `dbh_cm` (diameter in cm), `g_m2` (basal area in mÂ²), and `geometry` (buffered stem cross-section).
}
\description{
This function detects tree stems and estimates their diameters using DBSCAN clustering followed by RANSAC-based circle fitting on 3D point cloud data. It outputs an `sf` object with the estimated diameter at breast height (DBH), basal area, and stem location. This tool is designed for use in forest structure analysis from terrestrial LiDAR or photogrammetric point clouds.
}
\examples{
\dontrun{
data_ref <- data.frame(x = runif(100), y = runif(100), z = runif(100))
result <- DetectAndMeasureTreesArch(data_ref, eps_value = 0.3, minPts_value = 10,
                                    d1_m_minimum = 0.05, d1_m_maximum = 1.0,
                                    n_ransac_par = 30, k_ransac_par = 100,
                                    t_ransac_par = 0.01, d_ransac_par = 0.05)
plot(result["dbh_cm"])
}

}
